name: Build and Deploy to wo-form.womotaq.com

on:
  pull_request:
    branches:
      - main
  push: # TODO : disallow push to main
    branches:
      - main

# https://medium.com/@colonal/automating-flutter-builds-and-releases-with-github-actions-77ccf4a1ccdd
# jobs:
#   build:
#     name: Build
#     runs-on: macos-latest # ensures an ios build possibility

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       # For android builds
#       # Duration: ~3 minutes
#       # - name: Set Up Java
#       #   uses: actions/setup-java@v3.12.0
#       #   with:
#       #     distribution: "oracle"
#       #     java-version: "17"

#       # Duration: ~1 minute
#       - name: Set Up Flutter
#         uses: subosito/flutter-action@v2
#         with:
#           channel: "stable"

#       - name: Install dependencies
#         run: flutter pub get

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      - name: Create .env file
        run: echo "${{ secrets.DOTENV_FILE }}" > assets/.env

      - name: Update wo_form version file
        run: dart lib/wo_form_version/generate_version.dart

      - name: Build Flutter Web
        run: flutter build web

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Authenticate with Firebase
        run: firebase login:ci
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy to Firebase Hosting
        run: |
          firebase experiments:enable webframeworks
          firebase deploy --only hosting

      # - name: Set up Firebase CLI
      #   uses: w9jds/firebase-action@v2.2.0
      #   with:
      #     args: deploy --only hosting
      #   env:
      #     FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV

      - name: Create Git tag
        id: create_tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${VERSION}" -m "Release v${VERSION}"
          git push origin "v${VERSION}"

      # - name: Create Git tag for release
      #   id: tag_step
      #   run: |
      #     version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
      #     echo "VERSION=$version" >> $GITHUB_ENV
      #     git config user.name "github-actions[bot]"
      #     git config user.email "github-actions[bot]@users.noreply.github.com"
      #     git tag -a "v$version" -m "Release v$version"
      #     git push origin "v$version"

# stages:
#   - build
#   - deploy

# build_app:
#   image: "ghcr.io/cirruslabs/flutter:stable"
#   stage: build
#   before_script:
#     - "command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )"
#     - eval $(ssh-agent -s)
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - ssh-add <(echo "$SSH_PRIVATE_KEY")
#     - echo "HOST *" > ~/.ssh/config
#     - echo "StrictHostKeyChecking no" >> ~/.ssh/config
#     - cp ${APP_DOTENV_FILE} assets/dotenv
#     - flutter pub get
#   script:
#     - flutter build web
#   artifacts:
#     untracked: true

# deploy_app:
#   image: "debian:12-slim"
#   stage: deploy
#   dependencies:
#     - build_app
#   only:
#     refs:
#       - main
#   before_script:
#     - apt-get -y update; apt-get -y install curl sudo
#     - curl -sL https://firebase.tools | bash
#     - firebase use $FIREBASE_PROJECT_ID
#   script:
#     - firebase deploy --only hosting:wo-form-example
